/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/teacher-content.js":
/*!*****************************************!*\
  !*** ./resources/js/teacher-content.js ***!
  \*****************************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nbuttons = document.getElementsByClassName('btn btn-link');\n\n_toConsumableArray(buttons).forEach(function (button) {\n  button.addEventListener('click', function (e) {\n    e.preventDefault();\n  });\n});\n\nvar expandables = document.getElementsByClassName('expandable');\n\n_toConsumableArray(expandables).forEach(function (exp) {\n  exp.addEventListener('click', function () {\n    var selector = this.id;\n    var toBeExpanded = document.getElementsByClassName(selector);\n\n    _toConsumableArray(toBeExpanded).forEach(function (element) {\n      if (element.classList.contains('hidden')) {\n        element.classList.remove('hidden');\n        document.getElementById('sign-' + selector).innerHTML = '-';\n      } else {\n        element.classList.add('hidden');\n        document.getElementById('sign-' + selector).innerHTML = '+';\n      }\n    });\n  });\n}); // Get the <span> element that closes the modal\n\n\nvar span = document.getElementsByClassName(\"close\")[0]; // When the user clicks the button, open the modal\n// btn.onclick = function() {\n//   modal.style.display = \"block\";\n// }\n// When the user clicks on <span> (x), close the modal\n\nspan.onclick = function () {\n  var modals = document.getElementsByClassName('modal');\n\n  _toConsumableArray(modals).forEach(function (modal) {\n    modal.style.display = \"none\";\n    hideArrows();\n  });\n}; // When the user clicks anywhere outside the modal, close it\n\n\nwindow.onclick = function (event) {\n  var modals = document.getElementsByClassName('modal');\n\n  _toConsumableArray(modals).forEach(function (modal) {\n    if (event.target === modal) {\n      modal.style.display = \"none\";\n      hideArrows();\n    }\n  });\n};\n\nvar cards = document.getElementsByClassName('sequence-card');\n\n_toConsumableArray(cards).forEach(function (card) {\n  card.addEventListener('click', function () {\n    toggleChange(this);\n  });\n});\n\nfunction selectOne(el) {\n  // select element\n  var borderClass = _toConsumableArray(el.classList).find(function (x) {\n    return x !== 'sequence-card';\n  });\n\n  var bgClass = borderClass + '-filled';\n  el.classList.add(bgClass); // show content\n\n  showContent(el);\n  return bgClass;\n}\n\nfunction showContent(el) {\n  var lsContentBlocks = document.getElementsByClassName('ls-content');\n\n  _toConsumableArray(lsContentBlocks).forEach(function (block) {\n    if (block.id !== el.id + '-content') {\n      if (!block.classList.contains('hidden')) {\n        block.classList.add('hidden');\n      }\n    } else {\n      if (block.classList.contains('hidden')) {\n        block.classList.remove('hidden');\n        var tabContainers = block.getElementsByClassName('modal_tab_container');\n\n        if (tabContainers.length > 0) {\n          var input = tabContainers[0].getElementsByTagName('input')[0];\n          input.checked = true;\n        }\n      }\n    }\n  });\n\n  var openingBlock = document.getElementById(el.id + '-content');\n\n  if (openingBlock.classList.contains('exercises')) {\n    openingBlock.parentElement.classList.remove('hidden');\n  } else {\n    document.getElementById('exercises-content').classList.add('hidden');\n  }\n}\n\nfunction unselectOthers(el, bgClass) {\n  var toUnselect = _toConsumableArray(cards).filter(function (x) {\n    return x.id !== el.id && x.classList.length > 2;\n  });\n\n  _toConsumableArray(toUnselect).forEach(function (card) {\n    var bgClass = _toConsumableArray(card.classList).filter(function (x) {\n      return x !== 'sequence-card';\n    })[1];\n\n    card.classList.toggle(bgClass);\n  });\n} // Get the button that opens the modal\n\n\nvar btns = document.getElementsByClassName('modalBtn');\n\n_toConsumableArray(btns).forEach(function (btn) {\n  btn.onclick = function () {\n    var modalId = this.dataset.modalId;\n    var theoryBtn = document.querySelector('[data-theory=\"theory-sc-' + modalId + '\"]');\n    hideGoalGrade();\n    toggleChange(theoryBtn);\n    var modal = document.getElementById(\"myModal-\" + modalId);\n    modal.style.display = \"block\";\n  };\n});\n\nvar changeInProgress = false;\n\nfunction toggleChange(el) {\n  if (!changeInProgress) {\n    changeInProgress = true;\n    var bgClass = selectOne(el);\n    unselectOthers(el, bgClass);\n    changeInProgress = false;\n  }\n}\n\nvar switches = document.getElementsByClassName('switch');\n\n_toConsumableArray(switches).forEach(function (sw) {\n  sw.querySelector('input').addEventListener('click', function () {\n    var swId = sw.dataset[\"switch\"];\n    var swPId = sw.dataset.parentSwitch;\n    setVisibility(swId, classId, this.checked * this.checked); // selectChildren(swId);\n    // selectParent(swPId);\n  });\n});\n\nvar reviewSwitches = document.getElementsByClassName('switch-review');\n\n_toConsumableArray(reviewSwitches).forEach(function (sw) {\n  sw.querySelector('span').addEventListener('click', function () {\n    var swId = sw.dataset.switchReview;\n    var swPId = sw.dataset.parentSwitch;\n    var checked = Number(!Boolean(Number(this.dataset.reviewable)));\n    setReviewable(swId, classId, checked); // selectChildren(swId);\n    // selectParent(swPId);\n  });\n});\n\nfunction selectChildren(swId) {\n  var children = document.querySelectorAll('[data-parent-switch=\"' + swId + '\"]');\n\n  _toConsumableArray(children).forEach(function (sw) {\n    setTimeout(function () {\n      var parent = document.querySelector('[data-switch=\"' + swId + '\"]');\n      var parentInput = parent.querySelector('input');\n      var input = sw.querySelector('input');\n      input.checked = parentInput.checked && Number(sw.dataset.ogswitch);\n      selectChildren(sw.dataset[\"switch\"]);\n    }, 100);\n  });\n}\n\nfunction selectParent(swPId) {\n  var state;\n  var children = document.querySelectorAll('[data-parent-switch=\"' + swPId + '\"]');\n\n  _toConsumableArray(children).forEach(function (sw) {\n    state || (state = sw.querySelector('input').checked);\n  });\n\n  var parent = document.querySelector('[data-switch=\"' + swPId + '\"]');\n\n  if (parent) {\n    parent.querySelector('input').checked = state;\n\n    if (parent.dataset.parentSwitch) {\n      selectParent(parent.dataset.parentSwitch);\n    }\n  }\n}\n\nfunction setReviewable(swId, classId, reviewable) {\n  var dataObj = {\n    class_id: classId,\n    model: swId.split(\"-\")[0],\n    model_id: swId.split(\"-\")[1],\n    reviewable: reviewable\n  };\n  $.ajax({\n    url: reviewableUrl,\n    type: 'POST',\n    data: dataObj,\n    success: function success() {\n      var sw = document.querySelectorAll('[data-switch-review=\"' + swId + '\"]');\n\n      _toConsumableArray(sw).forEach(function (sw) {\n        var span = sw.querySelector('span');\n\n        if (span) {\n          span.dataset.reviewable = reviewable;\n          var img = span.querySelector('img');\n\n          if (img) {\n            img.src = '/icons/review-' + reviewable + '.svg';\n          }\n        }\n      });\n    },\n    error: function error(result) {\n      new Noty({\n        type: \"warning\",\n        text: \"<strong>Updating failed</strong><br>Please try again.\"\n      }).show();\n    }\n  });\n}\n\nfunction setVisibility(swId, classId, visibility) {\n  var dataObj = {\n    class_id: classId,\n    model: swId.split(\"-\")[0],\n    model_id: swId.split(\"-\")[1],\n    visibility: visibility\n  };\n  $.ajax({\n    url: visibilityUrl,\n    type: 'POST',\n    data: dataObj,\n    success: function success() {\n      var sw = document.querySelectorAll('[data-switch=\"' + swId + '\"]');\n\n      _toConsumableArray(sw).forEach(function (sw) {\n        sw.ogswitch = visibility;\n\n        if (sw.classList.contains('eye')) {\n          if (visibility) {\n            sw.classList.add('eye-on');\n            sw.closest('.bordered').classList.remove('bordered-not-visible');\n          } else {\n            sw.classList.remove('eye-on');\n            sw.closest('.bordered').classList.add('bordered-not-visible');\n          }\n        }\n\n        if (sw.dataset.lsBox) {\n          var lsBox = document.querySelector('#' + sw.dataset.lsBox);\n\n          if (visibility) {\n            lsBox.classList.add('bi-square-fill');\n          } else {\n            lsBox.classList.remove('bi-square-fill');\n          }\n        }\n\n        var input = sw.querySelector('input');\n\n        if (input) {\n          input.checked = visibility;\n        }\n      });\n    },\n    error: function error(result) {\n      new Noty({\n        type: \"warning\",\n        text: \"<strong>Updating failed</strong><br>Please try again.\"\n      }).show();\n    }\n  });\n} // modal js\n\n\nfunction showArrows(sequence_id) {\n  var controller_function = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var arrows = document.getElementById('control_arrows-' + sequence_id);\n  arrows.style.display = 'flex';\n  var pageNumbers = [0, 0];\n\n  if (controller_function) {\n    arrows.addEventListener('click', function (e) {\n      controller_function(sequence_id, e, args);\n    });\n    pageNumbers = controller_function(sequence_id, null, args);\n  }\n\n  return pageNumbers;\n}\n\nfunction hideArrows() {\n  var arrowsList = document.getElementsByClassName('control-arrows');\n\n  _toConsumableArray(arrowsList).forEach(function (arrows) {\n    arrows.style.display = 'none';\n    arrows.replaceWith(arrows.cloneNode(true));\n  });\n}\n\nfunction getDirection() {\n  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (e && e.target.dataset.direction) {\n    return e.target.dataset.direction;\n  }\n\n  return null;\n}\n\nfunction transformIndex() {\n  var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (i >= len) {\n    i = i % len;\n  }\n\n  if (i < 0) {\n    while (i < 0) {\n      i += len;\n    }\n  }\n\n  return i;\n}\n\nfunction followUpController(sequence_id) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var direction = getDirection(e);\n  var parentBlock = document.querySelector(\"[data-follow-up-id='follow-up-sc-content-\" + sequence_id + \"']\");\n  var nodes = parentBlock.getElementsByClassName('follow-up-question');\n\n  var activeNode = _toConsumableArray(nodes).find(function (n) {\n    return !n.classList.contains('hidden');\n  });\n\n  var newIndex = 0;\n\n  if (direction == 'prev') {\n    activeNode.classList.add('hidden');\n    newIndex = transformIndex(nodes.length, Number(activeNode.dataset.index) - 1);\n    nodes[newIndex].classList.remove('hidden');\n    showPageNumbers(sequence_id, newIndex + 1, nodes.length);\n  } else if (direction == 'next') {\n    activeNode.classList.add('hidden');\n    newIndex = transformIndex(nodes.length, Number(activeNode.dataset.index) + 1);\n    nodes[newIndex].classList.remove('hidden');\n    showPageNumbers(sequence_id, newIndex + 1, nodes.length);\n  }\n\n  return [newIndex + 1, nodes.length];\n}\n\nfunction exerciseController(sequence_id) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var direction = getDirection(e);\n  var selector = null;\n\n  if (args && args.exercise_id) {\n    selector = document.getElementById(\"exercise-\".concat(args.exercise_id, \"-sc-content\"));\n  } else {\n    selector = document.getElementsByClassName('exercises')[0];\n  }\n\n  var parentBlock = selector;\n  var goalGradeString = parentBlock.dataset.goalGrade;\n  showGoalGrade(goalGradeString);\n  var gradePointsString = parentBlock.dataset.gradePoints;\n  showGradePoints(gradePointsString);\n  var nodes = parentBlock.getElementsByClassName('modal_tab_container');\n\n  var activeNode = _toConsumableArray(nodes).find(function (n) {\n    return !n.classList.contains('hidden');\n  });\n\n  var newIndex = 0;\n  var modalState = 0;\n\n  if (activeNode) {\n    activeNode.querySelectorAll('input').forEach(function (input, index) {\n      if (input.checked) {\n        modalState = index;\n      }\n    });\n\n    if (direction == 'prev') {\n      activeNode.classList.add('hidden');\n      newIndex = transformIndex(nodes.length, Number(activeNode.dataset.index) - 1);\n      nodes[newIndex].classList.remove('hidden');\n      nodes[newIndex].getElementsByTagName('input')[modalState].checked = true;\n      showPageNumbers(sequence_id, newIndex + 1, nodes.length);\n    } else if (direction == 'next') {\n      activeNode.classList.add('hidden');\n      newIndex = transformIndex(nodes.length, Number(activeNode.dataset.index) + 1);\n      nodes[newIndex].classList.remove('hidden');\n      nodes[newIndex].getElementsByTagName('input')[modalState].checked = true;\n      showPageNumbers(sequence_id, newIndex + 1, nodes.length);\n    }\n  }\n\n  return [newIndex + 1, nodes.length];\n}\n\nfunction initFollowup(sequence_id) {\n  hideArrows();\n  hidePageNumbers();\n  hideGoalGrade();\n  hideGradePoints();\n  var pageNumbers = showArrows(sequence_id, followUpController);\n  document.querySelectorAll(\".follow-up-question\").forEach(function (q, index) {\n    if (!index) q.classList.remove('hidden');else q.classList.add('hidden');\n  });\n  showPageNumbers(sequence_id, pageNumbers[0], pageNumbers[1]);\n}\n\nfunction initExercises(exercise_id, sequence_id) {\n  hideArrows();\n  hidePageNumbers();\n  hideGoalGrade();\n  hideGradePoints();\n  var pageNumbers = showArrows(sequence_id, exerciseController, {\n    'exercise_id': exercise_id\n  });\n  showPageNumbers(sequence_id, pageNumbers[0], pageNumbers[1]);\n}\n\nfunction showPageNumbers(sequence_id) {\n  var indexNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var outOfNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var pageNumbers = document.getElementById('page-numbers-' + sequence_id);\n  pageNumbers.classList.remove('hidden');\n  var index = pageNumbers.getElementsByClassName('index')[0];\n  var outOf = pageNumbers.getElementsByClassName('out-of')[0];\n  index.innerHTML = Math.min(indexNum, outOfNum);\n  outOf.innerHTML = outOfNum;\n}\n\nfunction hidePageNumbers() {\n  var pageNumbers = document.getElementsByClassName('page-numbers');\n\n  _toConsumableArray(pageNumbers).forEach(function (pageNumber) {\n    pageNumber.classList.add('hidden');\n  });\n}\n\nfunction hideGoalGrade() {\n  var goalGrades = document.getElementsByClassName('goal-grade');\n\n  _toConsumableArray(goalGrades).forEach(function (goalGrade) {\n    goalGrade.classList.add('hidden');\n  });\n}\n\nfunction hideGradePoints() {\n  var gradePointsArray = document.getElementsByClassName('grade-points');\n\n  _toConsumableArray(gradePointsArray).forEach(function (gradePointsElement) {\n    gradePointsElement.classList.add('hidden');\n  });\n}\n\nfunction showGoalGrade() {\n  var goalGradeString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  document.getElementsByClassName('goal-grade')[0].innerHTML = \"Goal Grade: \" + goalGradeString;\n  document.getElementsByClassName('goal-grade')[0].classList.remove('hidden');\n}\n\nfunction showGradePoints() {\n  var gradePointsString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  document.getElementsByClassName('grade-points')[0].innerHTML = \"Grade Points: \" + gradePointsString;\n  document.getElementsByClassName('grade-points')[0].classList.remove('hidden');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidXR0b25zIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZm9yRWFjaCIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJleHBhbmRhYmxlcyIsImV4cCIsInNlbGVjdG9yIiwiaWQiLCJ0b0JlRXhwYW5kZWQiLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJyZW1vdmUiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImFkZCIsInNwYW4iLCJvbmNsaWNrIiwibW9kYWxzIiwibW9kYWwiLCJzdHlsZSIsImRpc3BsYXkiLCJoaWRlQXJyb3dzIiwid2luZG93IiwiZXZlbnQiLCJ0YXJnZXQiLCJjYXJkcyIsImNhcmQiLCJ0b2dnbGVDaGFuZ2UiLCJzZWxlY3RPbmUiLCJlbCIsImJvcmRlckNsYXNzIiwiZmluZCIsIngiLCJiZ0NsYXNzIiwic2hvd0NvbnRlbnQiLCJsc0NvbnRlbnRCbG9ja3MiLCJibG9jayIsInRhYkNvbnRhaW5lcnMiLCJsZW5ndGgiLCJpbnB1dCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY2hlY2tlZCIsIm9wZW5pbmdCbG9jayIsInBhcmVudEVsZW1lbnQiLCJ1bnNlbGVjdE90aGVycyIsInRvVW5zZWxlY3QiLCJmaWx0ZXIiLCJ0b2dnbGUiLCJidG5zIiwiYnRuIiwibW9kYWxJZCIsImRhdGFzZXQiLCJ0aGVvcnlCdG4iLCJxdWVyeVNlbGVjdG9yIiwiaGlkZUdvYWxHcmFkZSIsImNoYW5nZUluUHJvZ3Jlc3MiLCJzd2l0Y2hlcyIsInN3Iiwic3dJZCIsInN3UElkIiwicGFyZW50U3dpdGNoIiwic2V0VmlzaWJpbGl0eSIsImNsYXNzSWQiLCJyZXZpZXdTd2l0Y2hlcyIsInN3aXRjaFJldmlldyIsIk51bWJlciIsIkJvb2xlYW4iLCJyZXZpZXdhYmxlIiwic2V0UmV2aWV3YWJsZSIsInNlbGVjdENoaWxkcmVuIiwiY2hpbGRyZW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0VGltZW91dCIsInBhcmVudCIsInBhcmVudElucHV0Iiwib2dzd2l0Y2giLCJzZWxlY3RQYXJlbnQiLCJzdGF0ZSIsImRhdGFPYmoiLCJjbGFzc19pZCIsIm1vZGVsIiwic3BsaXQiLCJtb2RlbF9pZCIsIiQiLCJhamF4IiwidXJsIiwicmV2aWV3YWJsZVVybCIsInR5cGUiLCJkYXRhIiwic3VjY2VzcyIsImltZyIsInNyYyIsImVycm9yIiwicmVzdWx0IiwiTm90eSIsInRleHQiLCJzaG93IiwidmlzaWJpbGl0eSIsInZpc2liaWxpdHlVcmwiLCJjbG9zZXN0IiwibHNCb3giLCJzaG93QXJyb3dzIiwic2VxdWVuY2VfaWQiLCJjb250cm9sbGVyX2Z1bmN0aW9uIiwiYXJncyIsImFycm93cyIsInBhZ2VOdW1iZXJzIiwiYXJyb3dzTGlzdCIsInJlcGxhY2VXaXRoIiwiY2xvbmVOb2RlIiwiZ2V0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwidHJhbnNmb3JtSW5kZXgiLCJsZW4iLCJpIiwiZm9sbG93VXBDb250cm9sbGVyIiwicGFyZW50QmxvY2siLCJub2RlcyIsImFjdGl2ZU5vZGUiLCJuIiwibmV3SW5kZXgiLCJpbmRleCIsInNob3dQYWdlTnVtYmVycyIsImV4ZXJjaXNlQ29udHJvbGxlciIsImV4ZXJjaXNlX2lkIiwiZ29hbEdyYWRlU3RyaW5nIiwiZ29hbEdyYWRlIiwic2hvd0dvYWxHcmFkZSIsImdyYWRlUG9pbnRzU3RyaW5nIiwiZ3JhZGVQb2ludHMiLCJzaG93R3JhZGVQb2ludHMiLCJtb2RhbFN0YXRlIiwiaW5pdEZvbGxvd3VwIiwiaGlkZVBhZ2VOdW1iZXJzIiwiaGlkZUdyYWRlUG9pbnRzIiwicSIsImluaXRFeGVyY2lzZXMiLCJpbmRleE51bSIsIm91dE9mTnVtIiwib3V0T2YiLCJNYXRoIiwibWluIiwicGFnZU51bWJlciIsImdvYWxHcmFkZXMiLCJncmFkZVBvaW50c0FycmF5IiwiZ3JhZGVQb2ludHNFbGVtZW50Il0sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy90ZWFjaGVyLWNvbnRlbnQuanM/ODI3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnRuIGJ0bi1saW5rJyk7XG5bLi4uYnV0dG9uc10uZm9yRWFjaChmdW5jdGlvbihidXR0b24pe1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG59KTtcblxubGV0IGV4cGFuZGFibGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZXhwYW5kYWJsZScpO1xuWy4uLmV4cGFuZGFibGVzXS5mb3JFYWNoKGZ1bmN0aW9uKGV4cCkge1xuICAgIGV4cC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGxldCBzZWxlY3RvciA9IHRoaXMuaWQ7XG4gICAgICAgIGxldCB0b0JlRXhwYW5kZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHNlbGVjdG9yKTtcbiAgICAgICAgWy4uLnRvQmVFeHBhbmRlZF0uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCl7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKXtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWduLScgKyBzZWxlY3RvcikuaW5uZXJIVE1MID0gJy0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWduLScgKyBzZWxlY3RvcikuaW5uZXJIVE1MID0gJysnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuXG4vLyBHZXQgdGhlIDxzcGFuPiBlbGVtZW50IHRoYXQgY2xvc2VzIHRoZSBtb2RhbFxuY29uc3Qgc3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjbG9zZVwiKVswXTtcblxuLy8gV2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGJ1dHRvbiwgb3BlbiB0aGUgbW9kYWxcbi8vIGJ0bi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4vLyAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4vLyB9XG5cbi8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIDxzcGFuPiAoeCksIGNsb3NlIHRoZSBtb2RhbFxuc3Bhbi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgbW9kYWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWwnKTtcbiAgICBbLi4ubW9kYWxzXS5mb3JFYWNoKChtb2RhbCkgPT4ge1xuICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIGhpZGVBcnJvd3MoKTtcbiAgICB9KTtcbn1cblxuLy8gV2hlbiB0aGUgdXNlciBjbGlja3MgYW55d2hlcmUgb3V0c2lkZSB0aGUgbW9kYWwsIGNsb3NlIGl0XG53aW5kb3cub25jbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgbW9kYWxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWwnKTtcbiAgICBbLi4ubW9kYWxzXS5mb3JFYWNoKChtb2RhbCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBtb2RhbCkge1xuICAgICAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgaGlkZUFycm93cygpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmxldCBjYXJkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NlcXVlbmNlLWNhcmQnKTtcblsuLi5jYXJkc10uZm9yRWFjaCgoY2FyZCkgPT4ge1xuICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdG9nZ2xlQ2hhbmdlKHRoaXMpO1xuICAgIH0pO1xufSk7XG5cbmZ1bmN0aW9uIHNlbGVjdE9uZShlbCl7XG4gICAgLy8gc2VsZWN0IGVsZW1lbnRcbiAgICBsZXQgYm9yZGVyQ2xhc3MgPSBbLi4uZWwuY2xhc3NMaXN0XS5maW5kKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggIT09ICdzZXF1ZW5jZS1jYXJkJzsgfSk7XG4gICAgY29uc3QgYmdDbGFzcyA9IGJvcmRlckNsYXNzICsgJy1maWxsZWQnO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoYmdDbGFzcyk7XG4gICAgLy8gc2hvdyBjb250ZW50XG4gICAgc2hvd0NvbnRlbnQoZWwpO1xuICAgIHJldHVybiBiZ0NsYXNzO1xufVxuXG5mdW5jdGlvbiBzaG93Q29udGVudChlbCl7XG4gICAgY29uc3QgbHNDb250ZW50QmxvY2tzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbHMtY29udGVudCcpO1xuICAgIFsuLi5sc0NvbnRlbnRCbG9ja3NdLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgICAgIGlmIChibG9jay5pZCAhPT0gZWwuaWQgKyAnLWNvbnRlbnQnKXtcbiAgICAgICAgICAgIGlmICghYmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgICAgIGJsb2NrLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgICBibG9jay5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgIGxldCB0YWJDb250YWluZXJzID0gYmxvY2suZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWxfdGFiX2NvbnRhaW5lcicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhYkNvbnRhaW5lcnMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dCA9IHRhYkNvbnRhaW5lcnNbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JylbMF07XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgb3BlbmluZ0Jsb2NrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWwuaWQgKyAnLWNvbnRlbnQnKTtcbiAgICBpZiAob3BlbmluZ0Jsb2NrLmNsYXNzTGlzdC5jb250YWlucygnZXhlcmNpc2VzJykpe1xuICAgICAgICBvcGVuaW5nQmxvY2sucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhlcmNpc2VzLWNvbnRlbnQnKS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVuc2VsZWN0T3RoZXJzKGVsLCBiZ0NsYXNzKXtcbiAgICBjb25zdCB0b1Vuc2VsZWN0ID0gWy4uLmNhcmRzXS5maWx0ZXIoZnVuY3Rpb24oeCkgeyByZXR1cm4geC5pZCAhPT0gZWwuaWQgJiYgeC5jbGFzc0xpc3QubGVuZ3RoID4gMjsgfSk7XG4gICAgWy4uLnRvVW5zZWxlY3RdLmZvckVhY2goKGNhcmQpID0+IHtcbiAgICAgICAgbGV0IGJnQ2xhc3MgPSBbLi4uY2FyZC5jbGFzc0xpc3RdLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiB4ICE9PSAnc2VxdWVuY2UtY2FyZCc7IH0pWzFdO1xuICAgICAgICBjYXJkLmNsYXNzTGlzdC50b2dnbGUoYmdDbGFzcyk7XG4gICAgfSk7XG59XG5cbi8vIEdldCB0aGUgYnV0dG9uIHRoYXQgb3BlbnMgdGhlIG1vZGFsXG5sZXQgYnRucyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFsQnRuJyk7XG5bLi4uYnRuc10uZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgYnRuLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IG1vZGFsSWQgPSB0aGlzLmRhdGFzZXQubW9kYWxJZDtcbiAgICAgICAgbGV0IHRoZW9yeUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRoZW9yeT1cInRoZW9yeS1zYy0nICsgbW9kYWxJZCArICdcIl0nKTtcbiAgICAgICAgaGlkZUdvYWxHcmFkZSgpO1xuICAgICAgICB0b2dnbGVDaGFuZ2UodGhlb3J5QnRuKTtcbiAgICAgICAgbGV0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteU1vZGFsLVwiICsgbW9kYWxJZCk7XG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfVxufSk7XG5cbmxldCBjaGFuZ2VJblByb2dyZXNzID0gZmFsc2U7XG5mdW5jdGlvbiB0b2dnbGVDaGFuZ2UoZWwpe1xuICAgIGlmICghY2hhbmdlSW5Qcm9ncmVzcyl7XG4gICAgICAgIGNoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBjb25zdCBiZ0NsYXNzID0gc2VsZWN0T25lKGVsKTtcbiAgICAgICAgdW5zZWxlY3RPdGhlcnMoZWwsIGJnQ2xhc3MpO1xuICAgICAgICBjaGFuZ2VJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxufVxuXG5jb25zdCBzd2l0Y2hlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N3aXRjaCcpO1xuXG5bLi4uc3dpdGNoZXNdLmZvckVhY2goKHN3KSA9PiB7XG4gICAgc3cucXVlcnlTZWxlY3RvcignaW5wdXQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnN0IHN3SWQgPSBzdy5kYXRhc2V0LnN3aXRjaDtcbiAgICAgICAgY29uc3Qgc3dQSWQgPSBzdy5kYXRhc2V0LnBhcmVudFN3aXRjaDtcblxuICAgICAgICBzZXRWaXNpYmlsaXR5KHN3SWQsIGNsYXNzSWQsdGhpcy5jaGVja2VkICogdGhpcy5jaGVja2VkKTtcbiAgICAgICAgLy8gc2VsZWN0Q2hpbGRyZW4oc3dJZCk7XG4gICAgICAgIC8vIHNlbGVjdFBhcmVudChzd1BJZCk7XG4gICAgfSk7XG59KTtcblxuY29uc3QgcmV2aWV3U3dpdGNoZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzd2l0Y2gtcmV2aWV3Jyk7XG5cblsuLi5yZXZpZXdTd2l0Y2hlc10uZm9yRWFjaCgoc3cpID0+IHtcbiAgICBzdy5xdWVyeVNlbGVjdG9yKCdzcGFuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBjb25zdCBzd0lkID0gc3cuZGF0YXNldC5zd2l0Y2hSZXZpZXc7XG4gICAgICAgIGNvbnN0IHN3UElkID0gc3cuZGF0YXNldC5wYXJlbnRTd2l0Y2g7XG5cbiAgICAgICAgbGV0IGNoZWNrZWQgPSBOdW1iZXIoIUJvb2xlYW4oTnVtYmVyKHRoaXMuZGF0YXNldC5yZXZpZXdhYmxlKSkpO1xuICAgICAgICBzZXRSZXZpZXdhYmxlKHN3SWQsIGNsYXNzSWQsIGNoZWNrZWQpO1xuICAgICAgICAvLyBzZWxlY3RDaGlsZHJlbihzd0lkKTtcbiAgICAgICAgLy8gc2VsZWN0UGFyZW50KHN3UElkKTtcbiAgICB9KTtcbn0pO1xuXG5mdW5jdGlvbiBzZWxlY3RDaGlsZHJlbihzd0lkKXtcbiAgICBsZXQgY2hpbGRyZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wYXJlbnQtc3dpdGNoPVwiJyArIHN3SWQgKyAnXCJdJyk7XG4gICAgWy4uLmNoaWxkcmVuXS5mb3JFYWNoKChzdykgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zd2l0Y2g9XCInICsgc3dJZCArICdcIl0nKTtcbiAgICAgICAgICAgIGxldCBwYXJlbnRJbnB1dCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuXG4gICAgICAgICAgICBsZXQgaW5wdXQgPSBzdy5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IHBhcmVudElucHV0LmNoZWNrZWQgJiYgTnVtYmVyKHN3LmRhdGFzZXQub2dzd2l0Y2gpO1xuICAgICAgICAgICAgc2VsZWN0Q2hpbGRyZW4oc3cuZGF0YXNldC5zd2l0Y2gpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RQYXJlbnQoc3dQSWQpe1xuICAgIGxldCBzdGF0ZTtcblxuICAgIGxldCBjaGlsZHJlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBhcmVudC1zd2l0Y2g9XCInICsgc3dQSWQgKyAnXCJdJyk7XG4gICAgWy4uLmNoaWxkcmVuXS5mb3JFYWNoKChzdykgPT4ge1xuICAgICAgICBzdGF0ZSB8fD0gc3cucXVlcnlTZWxlY3RvcignaW5wdXQnKS5jaGVja2VkO1xuICAgIH0pO1xuXG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXN3aXRjaD1cIicgKyBzd1BJZCArICdcIl0nKTtcbiAgICBpZiAocGFyZW50KXtcbiAgICAgICAgcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuY2hlY2tlZCA9IHN0YXRlO1xuICAgICAgICBpZiAocGFyZW50LmRhdGFzZXQucGFyZW50U3dpdGNoKXtcbiAgICAgICAgICAgIHNlbGVjdFBhcmVudChwYXJlbnQuZGF0YXNldC5wYXJlbnRTd2l0Y2gpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRSZXZpZXdhYmxlKHN3SWQsIGNsYXNzSWQsIHJldmlld2FibGUpe1xuICAgIGNvbnN0IGRhdGFPYmogPSB7XG4gICAgICAgIGNsYXNzX2lkOiBjbGFzc0lkLFxuICAgICAgICBtb2RlbDogc3dJZC5zcGxpdChcIi1cIilbMF0sXG4gICAgICAgIG1vZGVsX2lkOiBzd0lkLnNwbGl0KFwiLVwiKVsxXSxcbiAgICAgICAgcmV2aWV3YWJsZVxuICAgIH07XG5cbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6IHJldmlld2FibGVVcmwsXG4gICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgZGF0YTogZGF0YU9iaixcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnN0IHN3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3dpdGNoLXJldmlldz1cIicgKyBzd0lkICsgJ1wiXScpO1xuICAgICAgICAgICAgWy4uLnN3XS5mb3JFYWNoKChzdykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzcGFuID0gc3cucXVlcnlTZWxlY3Rvcignc3BhbicpO1xuICAgICAgICAgICAgICAgIGlmIChzcGFuKXtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5kYXRhc2V0LnJldmlld2FibGUgPSByZXZpZXdhYmxlXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBzcGFuLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW1nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSAnL2ljb25zL3Jldmlldy0nICsgcmV2aWV3YWJsZSArICcuc3ZnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgbmV3IE5vdHkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiPHN0cm9uZz5VcGRhdGluZyBmYWlsZWQ8L3N0cm9uZz48YnI+UGxlYXNlIHRyeSBhZ2Fpbi5cIlxuICAgICAgICAgICAgfSkuc2hvdygpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRWaXNpYmlsaXR5KHN3SWQsIGNsYXNzSWQsIHZpc2liaWxpdHkpe1xuICAgIGNvbnN0IGRhdGFPYmogPSB7XG4gICAgICAgIGNsYXNzX2lkOiBjbGFzc0lkLFxuICAgICAgICBtb2RlbDogc3dJZC5zcGxpdChcIi1cIilbMF0sXG4gICAgICAgIG1vZGVsX2lkOiBzd0lkLnNwbGl0KFwiLVwiKVsxXSxcbiAgICAgICAgdmlzaWJpbGl0eVxuICAgIH07XG5cbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6IHZpc2liaWxpdHlVcmwsXG4gICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgZGF0YTogZGF0YU9iaixcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnN0IHN3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3dpdGNoPVwiJyArIHN3SWQgKyAnXCJdJyk7XG4gICAgICAgICAgICBbLi4uc3ddLmZvckVhY2goKHN3KSA9PiB7XG4gICAgICAgICAgICAgICAgc3cub2dzd2l0Y2ggPSB2aXNpYmlsaXR5O1xuXG4gICAgICAgICAgICAgICAgaWYgKHN3LmNsYXNzTGlzdC5jb250YWlucygnZXllJykpe1xuICAgICAgICAgICAgICAgICAgICBpZiAodmlzaWJpbGl0eSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdy5jbGFzc0xpc3QuYWRkKCdleWUtb24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3cuY2xvc2VzdCgnLmJvcmRlcmVkJykuY2xhc3NMaXN0LnJlbW92ZSgnYm9yZGVyZWQtbm90LXZpc2libGUnKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3cuY2xhc3NMaXN0LnJlbW92ZSgnZXllLW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3LmNsb3Nlc3QoJy5ib3JkZXJlZCcpLmNsYXNzTGlzdC5hZGQoJ2JvcmRlcmVkLW5vdC12aXNpYmxlJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdy5kYXRhc2V0LmxzQm94KXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbHNCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHN3LmRhdGFzZXQubHNCb3gpXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aXNpYmlsaXR5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxzQm94LmNsYXNzTGlzdC5hZGQoJ2JpLXNxdWFyZS1maWxsJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsc0JveC5jbGFzc0xpc3QucmVtb3ZlKCdiaS1zcXVhcmUtZmlsbCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gc3cucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQpe1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdmlzaWJpbGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBuZXcgTm90eSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCI8c3Ryb25nPlVwZGF0aW5nIGZhaWxlZDwvc3Ryb25nPjxicj5QbGVhc2UgdHJ5IGFnYWluLlwiXG4gICAgICAgICAgICB9KS5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8gbW9kYWwganNcbmZ1bmN0aW9uIHNob3dBcnJvd3Moc2VxdWVuY2VfaWQsIGNvbnRyb2xsZXJfZnVuY3Rpb24gPSBudWxsLCBhcmdzID0gbnVsbCl7XG4gICAgbGV0IGFycm93cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9sX2Fycm93cy0nICsgc2VxdWVuY2VfaWQpO1xuICAgIGFycm93cy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuXG4gICAgbGV0IHBhZ2VOdW1iZXJzID0gWzAsMF07XG4gICAgaWYgKGNvbnRyb2xsZXJfZnVuY3Rpb24pe1xuICAgICAgICBhcnJvd3MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29udHJvbGxlcl9mdW5jdGlvbihzZXF1ZW5jZV9pZCwgZSwgYXJncylcbiAgICAgICAgfSlcbiAgICAgICAgcGFnZU51bWJlcnMgPSBjb250cm9sbGVyX2Z1bmN0aW9uKHNlcXVlbmNlX2lkLCBudWxsLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFnZU51bWJlcnM7XG59XG5cbmZ1bmN0aW9uIGhpZGVBcnJvd3MoKXtcbiAgICBsZXQgYXJyb3dzTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbnRyb2wtYXJyb3dzJyk7XG4gICAgWy4uLmFycm93c0xpc3RdLmZvckVhY2goKGFycm93cykgPT4ge1xuICAgICAgICBhcnJvd3Muc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgYXJyb3dzLnJlcGxhY2VXaXRoKGFycm93cy5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdGlvbihlID0gbnVsbCl7XG4gICAgaWYgKGUgJiYgZS50YXJnZXQuZGF0YXNldC5kaXJlY3Rpb24pe1xuICAgICAgICByZXR1cm4gZS50YXJnZXQuZGF0YXNldC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUluZGV4KGxlbiA9IDAsIGkgPSAwKXtcbiAgICBpZiAoaSA+PSBsZW4pe1xuICAgICAgICBpID0gaSAlIGxlbjtcbiAgICB9XG5cbiAgICBpZiAoaSA8IDApe1xuICAgICAgICB3aGlsZSAoaSA8IDApe1xuICAgICAgICAgICAgaSArPSBsZW47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gZm9sbG93VXBDb250cm9sbGVyKHNlcXVlbmNlX2lkLCBlID0gbnVsbCl7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGUpO1xuXG4gICAgY29uc3QgcGFyZW50QmxvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtZm9sbG93LXVwLWlkPSdmb2xsb3ctdXAtc2MtY29udGVudC1cIiArIHNlcXVlbmNlX2lkICsgXCInXVwiKTtcbiAgICBjb25zdCBub2RlcyA9IHBhcmVudEJsb2NrLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ZvbGxvdy11cC1xdWVzdGlvbicpO1xuICAgIGNvbnN0IGFjdGl2ZU5vZGUgPSBbLi4ubm9kZXNdLmZpbmQoKG4pID0+ICFuLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpO1xuICAgIGxldCBuZXdJbmRleCA9IDA7XG5cbiAgICBpZiAoZGlyZWN0aW9uID09ICdwcmV2Jyl7XG4gICAgICAgIGFjdGl2ZU5vZGUuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIG5ld0luZGV4ID0gdHJhbnNmb3JtSW5kZXgobm9kZXMubGVuZ3RoLCBOdW1iZXIoYWN0aXZlTm9kZS5kYXRhc2V0LmluZGV4KSAtIDEpO1xuICAgICAgICBub2Rlc1tuZXdJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHNob3dQYWdlTnVtYmVycyhzZXF1ZW5jZV9pZCwgbmV3SW5kZXggKyAxLCBub2Rlcy5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09ICduZXh0Jykge1xuICAgICAgICBhY3RpdmVOb2RlLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBuZXdJbmRleCA9IHRyYW5zZm9ybUluZGV4KG5vZGVzLmxlbmd0aCwgTnVtYmVyKGFjdGl2ZU5vZGUuZGF0YXNldC5pbmRleCkgKyAxKTtcbiAgICAgICAgbm9kZXNbbmV3SW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICBzaG93UGFnZU51bWJlcnMoc2VxdWVuY2VfaWQsIG5ld0luZGV4ICsgMSwgbm9kZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW25ld0luZGV4ICsgMSwgbm9kZXMubGVuZ3RoXTtcbn1cblxuZnVuY3Rpb24gZXhlcmNpc2VDb250cm9sbGVyKHNlcXVlbmNlX2lkLCBlID0gbnVsbCwgYXJncyA9IG51bGwpe1xuICAgIGxldCBkaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oZSk7XG5cbiAgICBsZXQgc2VsZWN0b3IgPSBudWxsO1xuXG4gICAgaWYgKGFyZ3MgJiYgYXJncy5leGVyY2lzZV9pZCl7XG4gICAgICAgIHNlbGVjdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGV4ZXJjaXNlLSR7YXJncy5leGVyY2lzZV9pZH0tc2MtY29udGVudGApXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdleGVyY2lzZXMnKVswXVxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudEJsb2NrID0gc2VsZWN0b3I7XG4gICAgY29uc3QgZ29hbEdyYWRlU3RyaW5nID0gcGFyZW50QmxvY2suZGF0YXNldC5nb2FsR3JhZGU7XG4gICAgc2hvd0dvYWxHcmFkZShnb2FsR3JhZGVTdHJpbmcpO1xuXG4gICAgY29uc3QgZ3JhZGVQb2ludHNTdHJpbmcgPSBwYXJlbnRCbG9jay5kYXRhc2V0LmdyYWRlUG9pbnRzO1xuICAgIHNob3dHcmFkZVBvaW50cyhncmFkZVBvaW50c1N0cmluZyk7XG5cbiAgICBjb25zdCBub2RlcyA9IHBhcmVudEJsb2NrLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFsX3RhYl9jb250YWluZXInKTtcbiAgICBjb25zdCBhY3RpdmVOb2RlID0gWy4uLm5vZGVzXS5maW5kKChuKSA9PiAhbi5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKTtcbiAgICBsZXQgbmV3SW5kZXggPSAwO1xuICAgIGxldCBtb2RhbFN0YXRlID0gMDtcblxuICAgIGlmIChhY3RpdmVOb2RlKXtcbiAgICAgICAgYWN0aXZlTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLmZvckVhY2goKGlucHV0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQpe1xuICAgICAgICAgICAgICAgIG1vZGFsU3RhdGUgPSBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAncHJldicpe1xuICAgICAgICAgICAgYWN0aXZlTm9kZS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gdHJhbnNmb3JtSW5kZXgobm9kZXMubGVuZ3RoLCBOdW1iZXIoYWN0aXZlTm9kZS5kYXRhc2V0LmluZGV4KSAtIDEpO1xuICAgICAgICAgICAgbm9kZXNbbmV3SW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgbm9kZXNbbmV3SW5kZXhdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpW21vZGFsU3RhdGVdLmNoZWNrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBzaG93UGFnZU51bWJlcnMoc2VxdWVuY2VfaWQsIG5ld0luZGV4ICsgMSwgbm9kZXMubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gJ25leHQnKSB7XG4gICAgICAgICAgICBhY3RpdmVOb2RlLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgbmV3SW5kZXggPSB0cmFuc2Zvcm1JbmRleChub2Rlcy5sZW5ndGgsIE51bWJlcihhY3RpdmVOb2RlLmRhdGFzZXQuaW5kZXgpICsgMSk7XG4gICAgICAgICAgICBub2Rlc1tuZXdJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICBub2Rlc1tuZXdJbmRleF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JylbbW9kYWxTdGF0ZV0uY2hlY2tlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHNob3dQYWdlTnVtYmVycyhzZXF1ZW5jZV9pZCwgbmV3SW5kZXggKyAxLCBub2Rlcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXdJbmRleCArIDEsIG5vZGVzLmxlbmd0aF07XG59XG5cbmZ1bmN0aW9uIGluaXRGb2xsb3d1cChzZXF1ZW5jZV9pZCl7XG4gICAgaGlkZUFycm93cygpO1xuICAgIGhpZGVQYWdlTnVtYmVycygpO1xuICAgIGhpZGVHb2FsR3JhZGUoKTtcbiAgICBoaWRlR3JhZGVQb2ludHMoKTtcbiAgICBsZXQgcGFnZU51bWJlcnMgPSBzaG93QXJyb3dzKHNlcXVlbmNlX2lkLCBmb2xsb3dVcENvbnRyb2xsZXIpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9sbG93LXVwLXF1ZXN0aW9uXCIpLmZvckVhY2goKHEsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmICghaW5kZXgpIHEuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIGVsc2UgcS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgIH0pO1xuICAgIHNob3dQYWdlTnVtYmVycyhzZXF1ZW5jZV9pZCwgcGFnZU51bWJlcnNbMF0sIHBhZ2VOdW1iZXJzWzFdKTtcbn1cblxuZnVuY3Rpb24gaW5pdEV4ZXJjaXNlcyhleGVyY2lzZV9pZCwgc2VxdWVuY2VfaWQpe1xuICAgIGhpZGVBcnJvd3MoKTtcbiAgICBoaWRlUGFnZU51bWJlcnMoKTtcbiAgICBoaWRlR29hbEdyYWRlKCk7XG4gICAgaGlkZUdyYWRlUG9pbnRzKCk7XG4gICAgbGV0IHBhZ2VOdW1iZXJzID0gc2hvd0Fycm93cyhzZXF1ZW5jZV9pZCwgZXhlcmNpc2VDb250cm9sbGVyLCB7J2V4ZXJjaXNlX2lkJzogZXhlcmNpc2VfaWR9KTtcbiAgICBzaG93UGFnZU51bWJlcnMoc2VxdWVuY2VfaWQsIHBhZ2VOdW1iZXJzWzBdLCBwYWdlTnVtYmVyc1sxXSk7XG59XG5cbmZ1bmN0aW9uIHNob3dQYWdlTnVtYmVycyhzZXF1ZW5jZV9pZCwgaW5kZXhOdW0gPSAwLCBvdXRPZk51bSA9IDApe1xuICAgIGNvbnN0IHBhZ2VOdW1iZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhZ2UtbnVtYmVycy0nICsgc2VxdWVuY2VfaWQpO1xuICAgIHBhZ2VOdW1iZXJzLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG4gICAgY29uc3QgaW5kZXggPSBwYWdlTnVtYmVycy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbmRleCcpWzBdO1xuICAgIGNvbnN0IG91dE9mID0gcGFnZU51bWJlcnMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnb3V0LW9mJylbMF07XG5cbiAgICBpbmRleC5pbm5lckhUTUwgPSBNYXRoLm1pbihpbmRleE51bSwgb3V0T2ZOdW0pO1xuICAgIG91dE9mLmlubmVySFRNTCA9IG91dE9mTnVtO1xufVxuXG5mdW5jdGlvbiBoaWRlUGFnZU51bWJlcnMoKXtcbiAgICBjb25zdCBwYWdlTnVtYmVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BhZ2UtbnVtYmVycycpO1xuICAgIFsuLi5wYWdlTnVtYmVyc10uZm9yRWFjaCgocGFnZU51bWJlcikgPT4ge1xuICAgICAgICBwYWdlTnVtYmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGhpZGVHb2FsR3JhZGUoKXtcbiAgICBjb25zdCBnb2FsR3JhZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZ29hbC1ncmFkZScpO1xuICAgIFsuLi5nb2FsR3JhZGVzXS5mb3JFYWNoKChnb2FsR3JhZGUpID0+IHtcbiAgICAgICAgZ29hbEdyYWRlLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGhpZGVHcmFkZVBvaW50cygpe1xuICAgIGNvbnN0IGdyYWRlUG9pbnRzQXJyYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdncmFkZS1wb2ludHMnKTtcbiAgICBbLi4uZ3JhZGVQb2ludHNBcnJheV0uZm9yRWFjaCgoZ3JhZGVQb2ludHNFbGVtZW50KSA9PiB7XG4gICAgICAgIGdyYWRlUG9pbnRzRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBzaG93R29hbEdyYWRlKGdvYWxHcmFkZVN0cmluZyA9ICcnKXtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdnb2FsLWdyYWRlJylbMF0uaW5uZXJIVE1MID0gXCJHb2FsIEdyYWRlOiBcIiArIGdvYWxHcmFkZVN0cmluZztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdnb2FsLWdyYWRlJylbMF0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG59XG5cbmZ1bmN0aW9uIHNob3dHcmFkZVBvaW50cyhncmFkZVBvaW50c1N0cmluZyA9ICcnKXtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdncmFkZS1wb2ludHMnKVswXS5pbm5lckhUTUwgPSBcIkdyYWRlIFBvaW50czogXCIgKyBncmFkZVBvaW50c1N0cmluZztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdncmFkZS1wb2ludHMnKVswXS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUFBLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxjQUFoQyxDQUFWOztBQUNBLG1CQUFJRixPQUFKLEVBQWFHLE9BQWIsQ0FBcUIsVUFBU0MsTUFBVCxFQUFnQjtFQUNqQ0EsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxVQUFTQyxDQUFULEVBQVc7SUFDeENBLENBQUMsQ0FBQ0MsY0FBRjtFQUNILENBRkQ7QUFHSCxDQUpEOztBQU1BLElBQUlDLFdBQVcsR0FBR1AsUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxZQUFoQyxDQUFsQjs7QUFDQSxtQkFBSU0sV0FBSixFQUFpQkwsT0FBakIsQ0FBeUIsVUFBU00sR0FBVCxFQUFjO0VBQ25DQSxHQUFHLENBQUNKLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFlBQVU7SUFDcEMsSUFBSUssUUFBUSxHQUFHLEtBQUtDLEVBQXBCO0lBQ0EsSUFBSUMsWUFBWSxHQUFHWCxRQUFRLENBQUNDLHNCQUFULENBQWdDUSxRQUFoQyxDQUFuQjs7SUFDQSxtQkFBSUUsWUFBSixFQUFrQlQsT0FBbEIsQ0FBMEIsVUFBVVUsT0FBVixFQUFrQjtNQUN4QyxJQUFJQSxPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLFFBQWxCLENBQTJCLFFBQTNCLENBQUosRUFBeUM7UUFDckNGLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkUsTUFBbEIsQ0FBeUIsUUFBekI7UUFDQWYsUUFBUSxDQUFDZ0IsY0FBVCxDQUF3QixVQUFVUCxRQUFsQyxFQUE0Q1EsU0FBNUMsR0FBd0QsR0FBeEQ7TUFDSCxDQUhELE1BR087UUFDSEwsT0FBTyxDQUFDQyxTQUFSLENBQWtCSyxHQUFsQixDQUFzQixRQUF0QjtRQUNBbEIsUUFBUSxD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RzlHLFFBQVEsQ0FBQ0Msc0JBQVQsQ0FBZ0MsY0FBaEMsQ0FBcEI7O0VBQ0EsbUJBQUk2RyxXQUFKLEVBQWlCNUcsT0FBakIsQ0FBeUIsVUFBQ2dKLFVBQUQsRUFBZ0I7SUFDckNBLFVBQVUsQ0FBQ3JJLFNBQVgsQ0FBcUJLLEdBQXJCLENBQXlCLFFBQXpCO0VBQ0gsQ0FGRDtBQUdIOztBQUVELFNBQVN3QyxhQUFULEdBQXdCO0VBQ3BCLElBQU15RixVQUFVLEdBQUduSixRQUFRLENBQUNDLHNCQUFULENBQWdDLFlBQWhDLENBQW5COztFQUNBLG1CQUFJa0osVUFBSixFQUFnQmpKLE9BQWhCLENBQXdCLFVBQUNnSSxTQUFELEVBQWU7SUFDbkNBLFNBQVMsQ0FBQ3JILFNBQVYsQ0FBb0JLLEdBQXBCLENBQXdCLFFBQXhCO0VBQ0gsQ0FGRDtBQUdIOztBQUVELFNBQVN3SCxlQUFULEdBQTBCO0VBQ3RCLElBQU1VLGdCQUFnQixHQUFHcEosUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxjQUFoQyxDQUF6Qjs7RUFDQSxtQkFBSW1KLGdCQUFKLEVBQXNCbEosT0FBdEIsQ0FBOEIsVUFBQ21KLGtCQUFELEVBQXdCO0lBQ2xEQSxrQkFBa0IsQ0FBQ3hJLFNBQW5CLENBQTZCSyxHQUE3QixDQUFpQyxRQUFqQztFQUNILENBRkQ7QUFHSDs7QUFFRCxTQUFTaUgsYUFBVCxHQUE0QztFQUFBLElBQXJCRixlQUFxQix1RUFBSCxFQUFHO0VBQ3hDakksUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxZQUFoQyxFQUE4QyxDQUE5QyxFQUFpRGdCLFNBQWpELEdBQTZELGlCQUFpQmdILGVBQTlFO0VBQ0FqSSxRQUFRLENBQUNDLHNCQUFULENBQWdDLFlBQWhDLEVBQThDLENBQTlDLEVBQWlEWSxTQUFqRCxDQUEyREUsTUFBM0QsQ0FBa0UsUUFBbEU7QUFDSDs7QUFFRCxTQUFTdUgsZUFBVCxHQUFnRDtFQUFBLElBQXZCRixpQkFBdUIsdUVBQUgsRUFBRztFQUM1Q3BJLFFBQVEsQ0FBQ0Msc0JBQVQsQ0FBZ0MsY0FBaEMsRUFBZ0QsQ0FBaEQsRUFBbURnQixTQUFuRCxHQUErRCxtQkFBbUJtSCxpQkFBbEY7RUFDQXBJLFFBQVEsQ0FBQ0Msc0JBQVQsQ0FBZ0MsY0FBaEMsRUFBZ0QsQ0FBaEQsRUFBbURZLFNBQW5ELENBQTZERSxNQUE3RCxDQUFvRSxRQUFwRTtBQUNIIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3RlYWNoZXItY29udGVudC5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/teacher-content.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/teacher-content.js"]();
/******/ 	
/******/ })()
;